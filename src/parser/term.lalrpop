use crate::ast::{Argument, Term};

grammar;

pub Term: Term = {
    <AppTerm>,
    <arg: Argument> ":" <t:Term> => Term::Lam(arg, t.into()),
    "if" <c:Term> "then" <t:Term> "else" <e:Term> => Term::If(c.into(), t.into(), e.into()),
    "let" <assignments: Assignment*> "in" <e: Term> => Term::Let(assignments, e.into()),
}

Argument: Argument = {
    <v: Id> => Argument::Var(v),
    <a: AttrSetArgument> => Argument::AttrSet(None, a),
    <v: Id> "@" <a: AttrSetArgument> => Argument::AttrSet(Some(v), a),
}

AttrSetArgument: Vec<(String, Option<Term>)> = {
    "{" <mut v: (<Id> <DefaultArg> ",")*> <last: (<Id> <DefaultArg>)?> "}" => {
        if let Some(last) = last {
            v.push(last);
        }
        v
    },
}

DefaultArg: Option<Term> = {
    <t: ("?" <Term>)?> => t,
}

AppTerm: Term = {
    <PathTerm>,
    <t1:AppTerm> <t2:PathTerm> => Term::App(t1.into(), t2.into()),
}

PathTerm: Term = {
    <AtomicTerm>,
    <t: PathTerm> "." <f: Id> => Term::Path(t.into(), f),
}

AtomicTerm: Term = {
    "true" => Term::True,
    "false" => Term::False,
    Id => Term::Var(<>).into(),
    "{" <assignments: Assignment*> "}" => Term::AttrSet(assignments),
    "(" <Term> ")",
}

Id: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => <>.into(),
}

Assignment: (String, Term) = {
    <v: Id> "=" <e: Term> ";" => (v, e),
}